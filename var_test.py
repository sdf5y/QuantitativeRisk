# -*- coding: utf-8 -*-
"""VaR_Test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dEDg_NVBhk43AbI2y1XCtu-kJriahvXI
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf
!pip install arch
from arch import arch_model

from tabulate import tabulate
import seaborn
import matplotlib.mlab as mlab
import warnings
warnings.filterwarnings("ignore")

"""Loading the data, and importing key libraries."""

#APPLE
stock_symbol = "AAPL"
start_date = "2022-09-01"
end_date = "2023-11-01"
AAPL = yf.download(stock_symbol, start=start_date,end=end_date)

#SPY
stock_symbol = "SPY"
SPY = yf.download(stock_symbol, start=start_date,end=end_date)

C_price_a = AAPL[['Close']]
C_price_a ['returns'] = C_price_a .Close.pct_change()
C_price_a  = C_price_a .dropna()
plt.hist(C_price_a.returns, bins=40)
plt.title('Apple Returns Histogram')
plt.xlabel('Returns')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()

C_price_s = SPY[['Close']]
C_price_s ['returns'] = C_price_s.Close.pct_change()
C_price_s  = C_price_s.dropna()
plt.hist(C_price_s.returns, bins=40)
plt.title('SPY Returns Histogram')
plt.xlabel('Returns')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()

#VaR of Apple and SPY based on their 1 year returns.
VaR_90_a = C_price_a['returns'].quantile(0.1)
VaR_95_a = C_price_a['returns'].quantile(0.05)
VaR_99_a = C_price_a['returns'].quantile(0.01)

print('--------------------------VaR for APPLE:--------------------------')
print (tabulate([['90%', VaR_90_a], ['95%', VaR_95_a], ['99%', VaR_99_a]], headers = ['Confidence Level', 'Value at Risk']))


print('--------------------------VaR for SPY:----------------------------')
VaR_90_s = C_price_s['returns'].quantile(0.1)
VaR_95_s = C_price_s['returns'].quantile(0.05)
VaR_99_s = C_price_s['returns'].quantile(0.01)

print (tabulate([['90%', VaR_90_s], ['95%', VaR_95_s], ['99%', VaR_99_s]], headers = ['Confidence Level', 'Value at Risk']))

"""Apple and SPY GARCH GJR and VaR forcasted calculations."""

C_price_s.dropna(inplace=True)

#Garch (1,1) model
model_s = arch_model(C_price_s['returns'], p=1, o =1, q=1, mean='constant', vol='GARCH', dist='skewt')
result_s = model_s.fit(disp="on", last_obs = end_date)
result_s.summary()

C_price_a.dropna(inplace=True)

#Garch (1,1) model
model_a = arch_model(C_price_a['returns'], p=1, o =1, q=1, mean='constant', vol='GARCH', dist='skewt')
result_a = model_a.fit(disp="on", last_obs = end_date)
result_a.summary()

# Get model estimated volatility
normal_volatility = result_s.conditional_volatility

# Plot model fitting results
plt.figure(figsize=(12,6))
plt.plot(normal_volatility, color = 'turquoise', label = 'Normal Volatility')
plt.plot(C_price_s['returns'], color = 'grey', label = 'Daily Returns', alpha = 0.4)
plt.legend(loc = 'upper right', frameon=False)

# Get model estimated volatility
normal_volatility = result_a.conditional_volatility

# Plot model fitting results
plt.figure(figsize=(12,6))
plt.plot(normal_volatility, color = 'turquoise', label = 'Normal Volatility')
plt.plot(C_price_a['returns'], color = 'grey', label = 'Daily Returns', alpha = 0.4)
plt.legend(loc = 'upper right', frameon=False)

from datetime import datetime, timedelta
days = np.arange(1, 11)
days = pd.DataFrame(days).T

end_date_formated = datetime.strptime(end_date, "%Y-%m-%d")
days = [end_date_formated + timedelta(days=i) for i in range(1, 11)]
days = [date.strftime("%Y-%m-%d") for date in days]
days = pd.DataFrame(days)

Spy_forecast = result_s.forecast(horizon = 10)
spy_return_f = np.sqrt(Spy_forecast.variance[-1:].T)
spy_return_f.column = ['Returns']

appl_forecast = result_a.forecast(horizon = 10)
appl_return_f = np.sqrt(appl_forecast.variance[-1:].T)
appl_return_f.column = ['Returns']

spy_return_f

spy_list = spy_return_f.values
spy_list = pd.DataFrame(spy_list)
result = pd.concat([days, spy_list], axis = 1)
result = result.set_axis(['Date', 'returns'], axis=1)

appl_list = appl_return_f.values
appl_list = pd.DataFrame(appl_list)
result = pd.concat([days, appl_list], axis = 1)
result = result.set_axis(['Date', 'returns'], axis=1)

dates_old = pd.DataFrame(C_price_s.index)
dates_new = pd.DataFrame(result['Date'])
spy_returns_fhist = pd.concat([C_price_s['returns'], result['returns']], ignore_index=True)
result.dropna()
dates = pd.DataFrame()
dates = pd.concat([dates_old, dates_new], ignore_index=True)

dates_old = pd.DataFrame(C_price_a.index)
dates_new = pd.DataFrame(result['Date'])
appl_returns_fhist = pd.concat([C_price_a['returns'], result['returns']], ignore_index=True)
result.dropna()

spy_returns_df = pd.concat([dates, spy_returns_fhist], axis = 1)
spy_returns_df['Date'] = pd.to_datetime(spy_returns_df['Date'])

appl_returns_df = pd.concat([dates, appl_returns_fhist], axis = 1)
appl_returns_df['Date'] = pd.to_datetime(appl_returns_df['Date'])

#plotting 10 day with the old returns

end_date = '2023-11-01'
end_date = datetime.strptime(end_date, '%Y-%m-%d')

plt.figure(figsize=(12,6))
plt.plot(spy_returns_df['Date'], spy_returns_df['returns'], label='Historical Prices', color='lightcoral', alpha=0.7)
plt.axvline(x=end_date, color='green', linestyle='--', label='End Date')
plt.xlabel('Days')
plt.ylabel('% Return')
plt.title('SPY Inc with Present 10-Day Value at Risk (VaR) Forecast')
plt.grid(True)
plt.show()

#plotting 10 day with the old returns

end_date = '2023-11-01'
end_date = datetime.strptime(end_date, '%Y-%m-%d')

plt.figure(figsize=(12,6))
plt.plot(appl_returns_df['Date'], appl_returns_df['returns'], label='Historical Prices', color='lightcoral', alpha=0.7)
plt.axvline(x=end_date, color='green', linestyle='--', label='End Date')
plt.xlabel('Days')
plt.ylabel('% Return')
plt.title('Apple Inc with Present 10-Day Value at Risk (VaR) Forecast')
plt.grid(True)
plt.show()

Spy_VaR = np.percentile(spy_returns_df['returns'], .05)
Appl_VaR = np.percentile(appl_returns_df['returns'], .05)

"""And now here is our final calculation at VaR using both Apple and Spy evaluations in out portfolio."""

#Final VaR
market_var = Appl_VaR * 186.79 * 100 + Spy_VaR * 281.12 * -100 + 10000*1
portfolio_var = np.percentile(market_var, 0.05)

print(f"Our ten day forcasted portfoliio for both Apple and Spy is: ${round(market_var.T,2)}")
print(f"Our expected gain at the 5% risk in our portfolio is ${round((10000 - portfolio_var),2)}")